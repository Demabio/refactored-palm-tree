import '../add_crop_one_screen/widgets/chipviewalbert_item_widget.dart';import 'bloc/add_crop_one_bloc.dart';import 'models/add_crop_one_model.dart';import 'models/chipviewalbert_item_model.dart';import 'package:flutter/material.dart';import 'package:kiamis_app/core/app_export.dart';import 'package:kiamis_app/widgets/app_bar/appbar_image.dart';import 'package:kiamis_app/widgets/app_bar/appbar_subtitle_1.dart';import 'package:kiamis_app/widgets/app_bar/custom_app_bar.dart';import 'package:kiamis_app/widgets/custom_drop_down.dart';import 'package:kiamis_app/widgets/custom_elevated_button.dart';import 'package:kiamis_app/widgets/custom_icon_button.dart';import 'package:kiamis_app/widgets/custom_outlined_button.dart';import 'package:kiamis_app/widgets/custom_search_view.dart';import 'package:kiamis_app/widgets/custom_text_form_field.dart';class AddCropOneScreen extends StatelessWidget {const AddCropOneScreen({Key? key}) : super(key: key);

static Widget builder(BuildContext context) { return BlocProvider<AddCropOneBloc>(create: (context) => AddCropOneBloc(AddCropOneState(addCropOneModelObj: AddCropOneModel()))..add(AddCropOneInitialEvent()), child: AddCropOneScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(resizeToAvoidBottomInset: false, appBar: CustomAppBar(leadingWidth: 60.h, leading: AppbarImage(svgPath: ImageConstant.imgSort, margin: EdgeInsets.only(left: 16.h, top: 3.v, bottom: 11.v), onTap: () {onTapSortone(context);}), centerTitle: true, title: AppbarSubtitle1(text: "lbl_add_new_crop".tr), styleType: Style.bgFill), body: SizedBox(width: mediaQueryData.size.width, child: SingleChildScrollView(padding: EdgeInsets.only(top: 5.v), child: Padding(padding: EdgeInsets.only(left: 16.h, right: 16.h, bottom: 5.v), child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [Padding(padding: EdgeInsets.only(left: 69.h), child: Row(children: [Column(crossAxisAlignment: CrossAxisAlignment.start, children: [Align(alignment: Alignment.centerRight, child: Row(mainAxisAlignment: MainAxisAlignment.end, children: [CustomIconButton(height: 31.v, width: 32.h, padding: EdgeInsets.all(8.h), child: CustomImageView(svgPath: ImageConstant.imgCheckmark)), Padding(padding: EdgeInsets.only(top: 16.v, bottom: 13.v), child: SizedBox(width: 54.h, child: Divider()))])), SizedBox(height: 6.v), Text("lbl_step_1".tr, style: CustomTextStyles.bodyLargeBluegray40003)]), Column(crossAxisAlignment: CrossAxisAlignment.start, children: [Row(children: [Padding(padding: EdgeInsets.only(top: 16.v, bottom: 13.v), child: SizedBox(width: 54.h, child: Divider())), CustomIconButton(height: 31.v, width: 32.h, padding: EdgeInsets.all(8.h), child: CustomImageView(svgPath: ImageConstant.imgCheckmark))]), SizedBox(height: 6.v), Align(alignment: Alignment.centerRight, child: Text("lbl_step_2".tr, style: CustomTextStyles.bodyLargeBluegray40003))])])), Align(alignment: Alignment.center, child: BlocSelector<AddCropOneBloc, AddCropOneState, TextEditingController?>(selector: (state) => state.searchController, builder: (context, searchController) {return CustomSearchView(margin: EdgeInsets.only(left: 13.h, top: 7.v, right: 18.h), controller: searchController, hintText: "lbl_search_crop".tr, alignment: Alignment.center, prefix: Container(margin: EdgeInsets.fromLTRB(15.h, 12.v, 9.h, 12.v), child: CustomImageView(svgPath: ImageConstant.imgSearch)), prefixConstraints: BoxConstraints(maxHeight: 40.v), suffix: Padding(padding: EdgeInsets.only(right: 15.h), child: IconButton(onPressed: () {searchController!.clear();}, icon: Icon(Icons.clear, color: Colors.grey.shade600))));})), Padding(padding: EdgeInsets.only(left: 13.h, top: 7.v), child: Text("lbl_common_crops".tr, style: CustomTextStyles.labelMediumPrimary_1)), SizedBox(height: 18.v), Align(alignment: Alignment.center, child: BlocSelector<AddCropOneBloc, AddCropOneState, AddCropOneModel?>(selector: (state) => state.addCropOneModelObj, builder: (context, addCropOneModelObj) {return Wrap(runSpacing: 14.v, spacing: 14.h, children: List<Widget>.generate(addCropOneModelObj?.chipviewalbertItemList.length ?? 0, (index) {ChipviewalbertItemModel model = addCropOneModelObj?.chipviewalbertItemList[index] ?? ChipviewalbertItemModel(); return ChipviewalbertItemWidget(model, onSelectedChipView: (value) {context.read<AddCropOneBloc>().add(UpdateChipViewEvent(index: index, isSelected: value));});}));})), SizedBox(height: 24.v), Text("lbl_crop2".tr, style: CustomTextStyles.labelMediumPrimary_1), BlocSelector<AddCropOneBloc, AddCropOneState, AddCropOneModel?>(selector: (state) => state.addCropOneModelObj, builder: (context, addCropOneModelObj) {return CustomDropDown(icon: Container(margin: EdgeInsets.only(left: 30.h), decoration: BoxDecoration(borderRadius: BorderRadius.circular(10.h)), child: CustomImageView(svgPath: ImageConstant.imgArrowdownPrimary)), hintText: "lbl_select".tr, items: addCropOneModelObj?.dropdownItemList ?? [], onChanged: (value) {context.read<AddCropOneBloc>().add(ChangeDropDownEvent(value: value));});}), SizedBox(height: 9.v), Text("msg_total_acreage".tr, style: CustomTextStyles.labelMediumPrimary_1), BlocSelector<AddCropOneBloc, AddCropOneState, TextEditingController?>(selector: (state) => state.areavalueoneController, builder: (context, areavalueoneController) {return CustomTextFormField(controller: areavalueoneController, hintText: "lbl_area".tr, textInputAction: TextInputAction.done);}), SizedBox(height: 9.v), Text("msg_unit_of_area".tr, style: CustomTextStyles.labelMediumPrimary_1), BlocSelector<AddCropOneBloc, AddCropOneState, AddCropOneModel?>(selector: (state) => state.addCropOneModelObj, builder: (context, addCropOneModelObj) {return CustomDropDown(icon: Container(margin: EdgeInsets.only(left: 30.h), decoration: BoxDecoration(borderRadius: BorderRadius.circular(10.h)), child: CustomImageView(svgPath: ImageConstant.imgArrowdownPrimary)), hintText: "lbl_select".tr, items: addCropOneModelObj?.dropdownItemList1 ?? [], onChanged: (value) {context.read<AddCropOneBloc>().add(ChangeDropDown1Event(value: value));});}), SizedBox(height: 9.v), Text("msg_use_of_certified".tr, style: CustomTextStyles.labelMediumPrimary_1), BlocSelector<AddCropOneBloc, AddCropOneState, AddCropOneModel?>(selector: (state) => state.addCropOneModelObj, builder: (context, addCropOneModelObj) {return CustomDropDown(icon: Container(margin: EdgeInsets.only(left: 30.h), decoration: BoxDecoration(borderRadius: BorderRadius.circular(10.h)), child: CustomImageView(svgPath: ImageConstant.imgArrowdownPrimary)), hintText: "lbl_select".tr, items: addCropOneModelObj?.dropdownItemList2 ?? [], onChanged: (value) {context.read<AddCropOneBloc>().add(ChangeDropDown2Event(value: value));});}), SizedBox(height: 10.v), Row(mainAxisAlignment: MainAxisAlignment.center, children: [Expanded(child: CustomOutlinedButton(text: "lbl_back".tr, margin: EdgeInsets.only(right: 1.h), buttonStyle: CustomButtonStyles.outlinePrimaryTL10, buttonTextStyle: CustomTextStyles.bodyLargePrimary_1)), Expanded(child: CustomElevatedButton(text: "lbl_next".tr, margin: EdgeInsets.only(left: 1.h), onTap: () {onTapNext(context);}))]), SizedBox(height: 12.v), CustomElevatedButton(text: "lbl_save".tr, leftIcon: Container(margin: EdgeInsets.only(right: 10.h), child: CustomImageView(svgPath: ImageConstant.imgSaveWhiteA700)), onTap: () {onTapSave(context);})])))))); } 
/// Navigates to the cropAgricultureScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the cropAgricultureScreen.
onTapSortone(BuildContext context) { NavigatorService.pushNamed(AppRoutes.cropAgricultureScreen, ); } 
/// Navigates to the addCropTwoScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the addCropTwoScreen.
onTapNext(BuildContext context) { NavigatorService.pushNamed(AppRoutes.addCropTwoScreen, ); } 
/// Navigates to the cropAgricultureScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the cropAgricultureScreen.
onTapSave(BuildContext context) { NavigatorService.pushNamed(AppRoutes.cropAgricultureScreen, ); } 
 }
