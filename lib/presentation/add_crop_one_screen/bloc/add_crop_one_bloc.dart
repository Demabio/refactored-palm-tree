import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import '../models/chipviewalbert_item_model.dart';import 'package:kiamis_app/presentation/add_crop_one_screen/models/add_crop_one_model.dart';part 'add_crop_one_event.dart';part 'add_crop_one_state.dart';/// A bloc that manages the state of a AddCropOne according to the event that is dispatched to it.
class AddCropOneBloc extends Bloc<AddCropOneEvent, AddCropOneState> {AddCropOneBloc(AddCropOneState initialState) : super(initialState) { on<AddCropOneInitialEvent>(_onInitialize); on<UpdateChipViewEvent>(_updateChipView); on<ChangeDropDownEvent>(_changeDropDown); on<ChangeDropDown1Event>(_changeDropDown1); on<ChangeDropDown2Event>(_changeDropDown2); }

_updateChipView(UpdateChipViewEvent event, Emitter<AddCropOneState> emit, ) { List<ChipviewalbertItemModel> newList = List<ChipviewalbertItemModel>.from(state.addCropOneModelObj!.chipviewalbertItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(addCropOneModelObj: state.addCropOneModelObj?.copyWith(chipviewalbertItemList: newList))); } 
_changeDropDown(ChangeDropDownEvent event, Emitter<AddCropOneState> emit, ) { emit(state.copyWith(selectedDropDownValue: event.value)); } 
_changeDropDown1(ChangeDropDown1Event event, Emitter<AddCropOneState> emit, ) { emit(state.copyWith(selectedDropDownValue1: event.value)); } 
_changeDropDown2(ChangeDropDown2Event event, Emitter<AddCropOneState> emit, ) { emit(state.copyWith(selectedDropDownValue2: event.value)); } 
List<ChipviewalbertItemModel> fillChipviewalbertItemList() { return List.generate(9, (index) => ChipviewalbertItemModel()); } 
List<SelectionPopupModel> fillDropdownItemList() { return [SelectionPopupModel(id: 1, title: "Item One", isSelected: true), SelectionPopupModel(id: 2, title: "Item Two"), SelectionPopupModel(id: 3, title: "Item Three")]; } 
List<SelectionPopupModel> fillDropdownItemList1() { return [SelectionPopupModel(id: 1, title: "Item One", isSelected: true), SelectionPopupModel(id: 2, title: "Item Two"), SelectionPopupModel(id: 3, title: "Item Three")]; } 
List<SelectionPopupModel> fillDropdownItemList2() { return [SelectionPopupModel(id: 1, title: "Item One", isSelected: true), SelectionPopupModel(id: 2, title: "Item Two"), SelectionPopupModel(id: 3, title: "Item Three")]; } 
_onInitialize(AddCropOneInitialEvent event, Emitter<AddCropOneState> emit, ) async  { emit(state.copyWith(searchController: TextEditingController(), areavalueoneController: TextEditingController())); emit(state.copyWith(addCropOneModelObj: state.addCropOneModelObj?.copyWith(chipviewalbertItemList: fillChipviewalbertItemList(), dropdownItemList: fillDropdownItemList(), dropdownItemList1: fillDropdownItemList1(), dropdownItemList2: fillDropdownItemList2()))); } 
 }
